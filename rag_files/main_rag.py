import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox
import threading
import os
import docx
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
import pickle


# --- –ö–õ–ê–°–° –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–ê (–ë–≠–ö–ï–ù–î) ---
# –ú—ã –≤—ã–Ω–µ—Å–ª–∏ –≤—Å—é –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞.
class RAGProcessor:
    def __init__(self, log_callback):
        self.log_callback = log_callback
        self.model = None

    def load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤. –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è."""
        if self.model is None:
            self.log_callback(
                "–ó–∞–≥—Ä—É–∑–∫–∞ AI-–º–æ–¥–µ–ª–∏ (sentence-transformers)... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."
            )
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—É—é –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—É—é –º–æ–¥–µ–ª—å
            self.model = SentenceTransformer("all-MiniLM-L6-v2")
            self.log_callback("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return True

    def _read_docx(self, filepath):
        """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .docx —Ñ–∞–π–ª–∞."""
        doc = docx.Document(filepath)
        full_text = [para.text for para in doc.paragraphs if para.text.strip()]
        return "\n".join(full_text)

    def _chunk_text(self, text, chunk_size=250, overlap=30):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (—á–∞–Ω–∫–∏)."""
        words = text.split()
        if not words:
            return []
        chunks = [" ".join(words[i : i + chunk_size]) for i in range(0, len(words), chunk_size - overlap)]
        return chunks

    def process_file(self, filepath):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞."""
        try:
            self.log_callback(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {os.path.basename(filepath)}")

            # –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
            self.log_callback("–®–∞–≥ 1/4: –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            text = self._read_docx(filepath)
            if not text:
                self.log_callback("–û—à–∏–±–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.", "error")
                return

            self.log_callback("–®–∞–≥ 2/4: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (—á–∞–Ω–∫–∏)...")
            chunks = self._chunk_text(text)
            self.log_callback(f"–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")

            if not chunks:
                self.log_callback("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞.", "error")
                return

            # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            self.log_callback("–®–∞–≥ 3/4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ (—ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤)... –≠—Ç–æ —Å–∞–º—ã–π –¥–æ–ª–≥–∏–π —ç—Ç–∞–ø.")
            embeddings = self.model.encode(chunks, show_progress_bar=True)
            self.log_callback("–í–µ–∫—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")

            # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞
            self.log_callback("–®–∞–≥ 4/4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ FAISS –∏ PKL...")
            base_dir = os.path.dirname(filepath)
            base_filename = os.path.splitext(os.path.basename(filepath))[0]

            faiss_path = os.path.join(base_dir, f"{base_filename}_index.faiss")
            pkl_path = os.path.join(base_dir, f"{base_filename}_chunks.pkl")

            embedding_dim = embeddings.shape[1]
            index = faiss.IndexFlatL2(embedding_dim)
            index.add(np.array(embeddings).astype("float32"))

            faiss.write_index(index, faiss_path)
            self.log_callback(f"-> –ò–Ω–¥–µ–∫—Å FAISS —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {faiss_path}", "success")

            with open(pkl_path, "wb") as f:
                pickle.dump(chunks, f)
            self.log_callback(f"-> –§—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {pkl_path}", "success")

            self.log_callback("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "success")

        except Exception as e:
            self.log_callback(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "error")


# --- –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–ò–ù–¢–ï–†–§–ï–ô–°) ---
class App(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è RAG")
        self.geometry("700x500")

        self.processor = RAGProcessor(self.log_message)

        # –°—Ç–∏–ª–∏ –¥–ª—è –ª–æ–≥–∞
        self.log_area = scrolledtext.ScrolledText(self, wrap=tk.WORD, state="disabled", font=("Arial", 10))
        self.log_area.pack(padx=10, pady=10, expand=True, fill="both")
        self.log_area.tag_config("info", foreground="black")
        self.log_area.tag_config("success", foreground="green", font=("Arial", 10, "bold"))
        self.log_area.tag_config("error", foreground="red")

        self.process_button = tk.Button(
            self, text="–í—ã–±—Ä–∞—Ç—å .docx —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", command=self.start_processing
        )
        self.process_button.pack(padx=10, pady=10)

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.preload_model()

    def preload_model(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI."""
        self.process_button.config(state="disabled", text="–ó–∞–≥—Ä—É–∑–∫–∞ AI-–º–æ–¥–µ–ª–∏...")
        thread = threading.Thread(target=self._model_loader_thread, daemon=True)
        thread.start()

    def _model_loader_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏."""
        success = self.processor.load_model()
        if success:
            self.process_button.config(state="normal", text="–í—ã–±—Ä–∞—Ç—å .docx —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")

    def log_message(self, msg, tag="info"):
        """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏–∑ –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""

        def _update_log():
            self.log_area.config(state="normal")
            self.log_area.insert(tk.END, msg + "\n", tag)
            self.log_area.config(state="disabled")
            self.log_area.see(tk.END)  # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑

        self.after(0, _update_log)

    def start_processing(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
        filepath = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ .docx —Ñ–∞–π–ª", filetypes=(("Word Documents", "*.docx"), ("All files", "*.*"))
        )
        if not filepath:
            self.log_message("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", "error")
            return

        self.log_area.config(state="normal")
        self.log_area.delete("1.0", tk.END)
        self.log_area.config(state="disabled")

        self.process_button.config(state="disabled")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.processing_thread_func, args=(filepath,), daemon=True)
        thread.start()

    def processing_thread_func(self, filepath):
        """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –≤ –ø–æ—Ç–æ–∫–µ."""
        self.processor.process_file(filepath)
        # –ö–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.process_button.config(state="normal")


if __name__ == "__main__":
    app = App()
    app.mainloop()
