// Теперь давайте рассмотрим различные способы подсчета четных чисел в 
// массиве `[1, 2, 3, 4, 5, 6, 8]` на JavaScript. Мы рассмотрим несколько 
// подходов: с использованием цикла `for`, метода `filter`, метода `reduce` и метода `forEach`. 
// ### 1. Используя цикл `for`
// Этот метод более традиционный и подойдет в большинстве случаев.

const myArray = [1, 2, 3, 4, 5, 6, 8];
let evenCount1 = 0;

for (let i = 0; i < myArray.length; i++) {
    if (myArray[i] % 2 === 0) {
        evenCount1++;
    }
}

console.log(evenCount1); // Вывод: 4


// ### 2. Используя метод `filter`

// Метод `filter` создает новый массив, содержащий все элементы,
// которые проходят проверку, заданную в передаваемой функции, 
// и вы можете просто вернуть длину этого массива.

const myArray1 = [1, 2, 3, 4, 5, 6, 8];

const evenCount2 = myArray1.filter(num => num % 2 === 0).length;

console.log(evenCount2); // Вывод: 4


// ### 3. Используя метод `reduce`

// Метод `reduce` позволяет аккумулировать значение 
// (в данном случае количество четных чисел) за одно проход по массиву.

const myArray2 = [1, 2, 3, 4, 5, 6, 8];

const evenCount3 = myArray2.reduce((count, num) => {
    return num % 2 === 0 ? count + 1 : count;
}, 0);

console.log(evenCount3); // Вывод: 4


// ### 4. Используя метод `forEach`

// Метод `forEach` выполняет указанную функцию один раз для каждого элемента массива.
// Он позволяет выполнять проверку и увеличивать счетчик.

const myArray3 = [1, 2, 3, 4, 5, 6, 8];
let evenCount4 = 0;

myArray3.forEach(num => {
    if (num % 2 === 0) {
        evenCount4++;
    }
});

console.log(evenCount4); // Вывод: 4


// ### 5. Используя цикл `for..of`

// Цикл `for..of` позволяет обходить элементы массива более читабельно.

const array = [1, 2, 3, 4, 5, 6, 8];
let evenCount = 0;

for (const num of array) {
    if (num % 2 === 0) {
        evenCount++;
    }
}

console.log(evenCount); // Вывод: 4


// ### Заключение

// Теперь у вас есть несколько способов подсчитать четные числа в массиве с 
// использованием различных методов в JavaScript. 
// Вы можете выбрать тот, который наиболее удобен для вас или лучше подходит в 
// зависимости от контекста вашей задачи. 
// Все предложенные методы дадут один и тот же результат: 4 четных числа в данном массиве.